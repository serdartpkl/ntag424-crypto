/**
 * SDM Configuration with Proper Validation
 * 
 * Manages different SDM profile configurations for NTAG424 tags.
 * Fixes the bug where file data could be encrypted with profiles that don't support it.
 */

const { SDMProfileError, ValidationError } = require('./error-types');

/**
 * SDM Configuration Manager
 */
class SDMConfig {
  
  /**
   * Predefined SDM profiles with validation rules
   */
  static profiles = {
    uidOnly: {
      name: 'uidOnly',
      includeUID: true,
      includeCounter: false,
      includeFileData: false,
      piccDataLength: 16,
      uidOffset: 1,
      uidLength: 7,
      description: 'Only UID in encrypted data'
    },
    
    counterOnly: {
      name: 'counterOnly',
      includeUID: false,
      includeCounter: true,
      includeFileData: false,
      piccDataLength: 16,
      counterOffset: 1,
      counterLength: 3,
      description: 'Only counter in encrypted data'
    },
    
    uidCounter: {
      name: 'uidCounter',
      includeUID: true,
      includeCounter: true,
      includeFileData: false,
      piccDataLength: 16,
      uidOffset: 1,
      uidLength: 7,
      counterOffset: 8,
      counterLength: 3,
      description: 'Both UID and counter (default)'
    },
    
    full: {
      name: 'full',
      includeUID: true,
      includeCounter: true,
      includeFileData: true,
      piccDataLength: 16,
      uidOffset: 1,
      uidLength: 7,
      counterOffset: 8,
      counterLength: 3,
      encFileDataLength: 16,
      description: 'UID, counter, and file data'
    }
  };

  /**
   * Get a predefined SDM profile by name
   * @param {string} profileName - Name of the profile
   * @returns {Object} The SDM profile configuration object
   */
  static getProfile(profileName) {
    if (!profileName || typeof profileName !== 'string') {
      return this.profiles.uidCounter;
    }
    
    const profile = this.profiles[profileName];
    if (!profile) {
      throw new SDMProfileError(
        `Unknown SDM profile: ${profileName}`,
        profileName,
        'getProfile'
      );
    }
    
    return profile;
  }

  /**
   * Validate operation compatibility with SDM profile
   * @param {string} operation - Operation type ('encrypt' or 'decrypt')
   * @param {Object|string} profile - SDM profile or profile name
   * @param {Object} data - Data to validate
   * @returns {boolean} True if validation passes
   */
  static validateOperationWithProfile(operation, profile, data) {
    if (typeof profile === 'string') {
      profile = this.getProfile(profile);
    }
    
    if (!profile) {
      throw new SDMProfileError(
        'Invalid SDM profile',
        profile,
        operation
      );
    }
    
    const errors = [];
    
    if (operation === 'encrypt') {
      if (data.fileData !== null && data.fileData !== undefined) {
        if (!profile.includeFileData) {
          errors.push(
            `Profile '${profile.name}' does not support file data encryption. Use 'full' profile instead.`
          );
        }
      }
      
      if (!data.uid && profile.includeUID) {
        errors.push(
          `Profile '${profile.name}' requires UID but none provided`
        );
      }
      
      if ((data.counter === null || data.counter === undefined) && profile.includeCounter) {
        errors.push(
          `Profile '${profile.name}' requires counter but none provided`
        );
      }
    }
    
    if (operation === 'decrypt') {
      if (data.enc && !profile.includeFileData) {
        errors.push(
          `Profile '${profile.name}' does not support encrypted file data. Use 'full' profile instead.`
        );
      }
      
      if (!data.picc) {
        errors.push('PICC data is required for decryption');
      }
      
      if (!data.cmac) {
        errors.push('CMAC data is required for decryption');
      }
    }
    
    if (errors.length > 0) {
      throw new SDMProfileError(
        `SDM profile validation failed: ${errors.join(', ')}`,
        profile,
        operation
      );
    }
    
    return true;
  }

  /**
   * Create a custom SDM profile configuration
   * @param {Object} config - Configuration object
   * @returns {Object} Complete SDM profile configuration
   */
  static createCustomProfile(config = {}) {
    const profile = {
      name: config.name || 'custom',
      includeUID: config.includeUID || false,
      includeCounter: config.includeCounter || false,
      includeFileData: config.includeFileData || false,
      piccDataLength: config.piccDataLength || 16,
      uidOffset: config.uidOffset || 1,
      uidLength: config.uidLength || 7,
      counterOffset: config.counterOffset || 8,
      counterLength: config.counterLength || 3,
      encFileDataLength: config.encFileDataLength || 16,
      description: config.description || 'Custom SDM profile',
      ...config
    };

    const validation = this.validateProfile(profile);
    if (!validation.isValid) {
      throw new SDMProfileError(
        `Invalid custom SDM profile: ${validation.errors.join(', ')}`,
        profile,
        'createCustomProfile'
      );
    }

    return profile;
  }

  /**
   * Validate SDM profile configuration
   * @param {Object} profile - Profile to validate
   * @returns {Object} Validation result
   */
  static validateProfile(profile) {
    const errors = [];
    
    if (!profile || typeof profile !== 'object') {
      return { isValid: false, errors: ['Profile must be an object'] };
    }
    
    if (typeof profile.piccDataLength !== 'number' || profile.piccDataLength < 1) {
      errors.push('piccDataLength must be a positive number');
    }
    
    if (profile.includeUID) {
      if (typeof profile.uidOffset !== 'number' || profile.uidOffset < 0) {
        errors.push('uidOffset must be a non-negative number when includeUID is true');
      }
      if (typeof profile.uidLength !== 'number' || profile.uidLength < 1) {
        errors.push('uidLength must be a positive number when includeUID is true');
      }
      if (profile.uidOffset + profile.uidLength > profile.piccDataLength) {
        errors.push('UID data extends beyond PICC data length');
      }
    }
    
    if (profile.includeCounter) {
      if (typeof profile.counterOffset !== 'number' || profile.counterOffset < 0) {
        errors.push('counterOffset must be a non-negative number when includeCounter is true');
      }
      if (typeof profile.counterLength !== 'number' || profile.counterLength < 1) {
        errors.push('counterLength must be a positive number when includeCounter is true');
      }
      if (profile.counterOffset + profile.counterLength > profile.piccDataLength) {
        errors.push('Counter data extends beyond PICC data length');
      }
    }
    
    if (profile.includeUID && profile.includeCounter) {
      const uidEnd = profile.uidOffset + profile.uidLength;
      const counterEnd = profile.counterOffset + profile.counterLength;
      
      if ((profile.uidOffset < profile.counterOffset && uidEnd > profile.counterOffset) ||
          (profile.counterOffset < profile.uidOffset && counterEnd > profile.uidOffset)) {
        errors.push('UID and counter data regions overlap');
      }
    }
    
    if (profile.includeFileData) {
      if (typeof profile.encFileDataLength !== 'number' || profile.encFileDataLength < 1) {
        errors.push('encFileDataLength must be a positive number when includeFileData is true');
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Get available profile names
   * @returns {string[]} Array of profile names
   */
  static getAvailableProfiles() {
    return Object.keys(this.profiles);
  }

  /**
   * Get profile information for debugging
   * @param {string} profileName - Name of the profile
   * @returns {Object} Profile information
   */
  static getProfileInfo(profileName) {
    const profile = this.getProfile(profileName);
    return {
      name: profile.name,
      description: profile.description,
      capabilities: {
        supportsUID: profile.includeUID,
        supportsCounter: profile.includeCounter,
        supportsFileData: profile.includeFileData
      },
      dataLayout: {
        piccDataLength: profile.piccDataLength,
        uidOffset: profile.uidOffset,
        uidLength: profile.uidLength,
        counterOffset: profile.counterOffset,
        counterLength: profile.counterLength,
        encFileDataLength: profile.encFileDataLength
      }
    };
  }

  /**
   * Suggest compatible profile for given requirements
   * @param {Object} requirements - Requirements object
   * @returns {string} Suggested profile name
   */
  static suggestProfile(requirements) {
    const { needsUID, needsCounter, needsFileData } = requirements;
    
    if (needsFileData) {
      return 'full';
    }
    
    if (needsUID && needsCounter) {
      return 'uidCounter';
    }
    
    if (needsUID) {
      return 'uidOnly';
    }
    
    if (needsCounter) {
      return 'counterOnly';
    }
    
    return 'uidCounter';
  }
}

module.exports = SDMConfig;
